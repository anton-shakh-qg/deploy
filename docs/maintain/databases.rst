Maintain PostgreSQL
===================

Troubleshoot
------------

Check the log file, ``/var/log/postgresql/postgresql-11-main.log``, if debugging an unscheduled restart of the ``postgres`` service, for example.

Control access
--------------

Each service should have a service account, including:

-  Kingfisher Process
-  Kingfisher Summarize
-  Pelican
-  Redash

Each individual should have a personal account. See :ref:`add-postgresql-user`.

All users should be tracked in `this spreadsheet <https://docs.google.com/spreadsheets/d/1k5UvY-pMWxDb5-krRny_J3HjN1Y6cpA9sMVAFK7tqsc/edit#gid=0>`__.

Improve performance
-------------------

Tune settings
~~~~~~~~~~~~~

-  :doc:`Connect to the server<../use/ssh>`
-  Change to the ``postgres`` user:

   .. code-block:: bash

      su - postgres

-  Download the ``postgresqltuner.sql`` file (if not available):

   .. code-block:: bash

      curl -O https://raw.githubusercontent.com/jfcoz/postgresqltuner/master/postgresqltuner.pl

-  Make the ``postgresqltuner.sql`` file executable:

   .. code-block:: bash

      chmod ug+x postgresqltuner.pl

-  Run the ``postgresqltuner.sql`` file:

   .. code-block:: bash

      ./postgresqltuner.sql --ssd

Under "Configuration advice", address "HIGH" and "MEDIUM" recommendations.

Reference: `Tuning Your PostgreSQL Server <https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server>`__

Reference: `Slow Query Questions <https://wiki.postgresql.org/wiki/Slow_Query_Questions>`__

.. _pg-stat-all-tables:

Check autovacuum statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sql

   SELECT nspname,
          s.relname,
          reltuples,
          n_live_tup::real,
          n_dead_tup::real,
          TRUNC(n_dead_tup / GREATEST(reltuples::numeric, 1) * 100, 2) AS percent,
          last_autovacuum,
          last_autoanalyze
   FROM pg_stat_all_tables s
   JOIN pg_class c ON relid = c.oid
   JOIN pg_namespace ON relnamespace = pg_namespace.oid
   ORDER BY percent DESC, last_autovacuum;

See the `pg_stat_all_tables <https://www.postgresql.org/docs/11/monitoring-stats.html#PG-STAT-ALL-TABLES-VIEW>`__ table's documentation.

To get the table related to a ``pg_toast_*`` table, take the number after ``pg_toast_``, and run, for example:

.. code-block:: sql

   SELECT '16712'::regclass;

Check usage
-----------

Explore database
~~~~~~~~~~~~~~~~

List databases:

.. code-block:: none

   \l

List schemas:

.. code-block:: none

   \dn

List tables, views and sequences in the ``public`` schema:

.. code-block:: none

   \d

List tables, indexes, views and sequences in the ``public`` schema:

.. code-block:: none

   \dtivs

To list tables, views and/or sequences in a specific schema, append, for example, ``views.*`` – or append ``*.*`` for all schema.

You can use the ``psql`` command's ``-E`` (``--echo-hidden``) `flag <https://www.postgresql.org/docs/11/app-psql.html#R1-APP-PSQL-3>`__ to echo the queries generated by the backslash commands.

Check disk usage
~~~~~~~~~~~~~~~~

Get all database sizes:

.. code-block:: none

   \l+

Get all schema sizes:

.. code-block:: sql

   SELECT schema_name,
          schema_size,
          pg_size_pretty(schema_size),
          TRUNC(schema_size::numeric / pg_database_size(current_database()) * 100, 2) AS percent
   FROM (
     SELECT nspname AS schema_name,
            SUM(pg_relation_size(c.oid))::bigint AS schema_size
     FROM pg_class c
     JOIN pg_namespace n ON c.relnamespace = n.oid
     GROUP BY schema_name
   ) t
   ORDER BY schema_size DESC;

Get relation sizes in the ``public`` schema:

.. code-block:: none

   \dtis+

To get relation sizes in a specific schema, append, for example, ``views.*`` – or append ``*.*`` for all schema.

See the `Database Object Size Functions <https://www.postgresql.org/docs/11/functions-admin.html#FUNCTIONS-ADMIN-DBSIZE>`__ documentation.

.. _pg-stat-activity:

Show running queries
~~~~~~~~~~~~~~~~~~~~

Show running queries:

.. code-block:: sql

   SELECT pid, client_addr, usename, state, wait_event_type, NOW() - query_start AS time, query
   FROM pg_stat_activity
   WHERE query <> ''
   ORDER BY time DESC;

See the `pg_stat_activity <https://www.postgresql.org/docs/11/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW>`__ table's documentation.

.. _pg-recover-replica:

Recover the replica
-------------------

If replication breaks or the replica server goes offline, you must recover the replica, in two stages: mitigate the downtime, and fix the replication.

Mitigate downtime
~~~~~~~~~~~~~~~~~

#. :ref:`Enable public access<postgres-public-access>` to the PostgreSQL service on the main server, by modifying its Pillar file:

   .. code-block:: yaml

      postgres:
        public_access: True

   For example, for the ``kingfisher-process`` target, modify the ``pillar/kingfisher.sls`` file.

#. :doc:`Deploy the main server<../../deploy/deploy>`
#. Update DNS records:

   #. Login to `GoDaddy <https://sso.godaddy.com>`__
   #. If access was delegated, open `Delegate Access <https://account.godaddy.com/access>`__ and click the *Access Now* button
   #. Open `DNS Management <https://dcc.godaddy.com/manage/OPEN-CONTRACTING.ORG/dns>`__ for open-contracting.org
   #. Update the replica's CNAME record to point to the main server's A record: for example, point ``postgres-readonly`` to ``kingfisher-process1``
   #. Wait for the changes to propagate, which depends on the original TTL value

Fix replication
~~~~~~~~~~~~~~~

#. Copy WAL archives from the main server to the replica server, replacing ``example.open-contracting.org`` below with the main server's hostname:

   .. note::

      The ``postgres`` user on the replica server must have an SSH key pair, and its public key must be an authorized key of the ``postgres`` user on the main server. See :ref:`pg-ssh-key-setup`.

   .. code-block:: bash

      service postgres stop
      sudo su - postgres
      timeout 1 ssh postgres@example.open-contracting.org -p 8255
      rsync -azv postgres@example.open-contracting.org:/var/lib/postgresql/11/main/archive/ /var/lib/postgresql/11/main/archive/
      exit
      service postgres start

#. Monitor the replica logs. You should see messages about recovery from WAL files.

   .. code-block:: bash

      tail -f /var/log/postgresql/postgresql-11-main.log

If all else fails, you can fallback to rebuilding the replica. See :ref:`pg-setup-replication`.
